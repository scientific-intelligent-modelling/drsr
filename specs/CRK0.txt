"""
Find the mathematical function skeleton that represents Rate of change of concentration in chemistry reaction kinetics, given data on Time, and Concentration at time t.
"""


import numpy as np

#Initialize parameters
MAX_NPARAMS = 10
params = [1.0]*MAX_NPARAMS


@evaluate.run
def evaluate(data: dict) -> float:
    """ Evaluate the equation on data observations."""
    
    # Load data observations
    inputs, outputs = data['inputs'], data['outputs']
    X = inputs
    
    # Optimize parameters based on data
    from scipy.optimize import minimize
    def loss(params):
        y_pred = equation(*X, params)
        return np.mean((y_pred - outputs) ** 2)

    loss_partial = lambda params: loss(params)
    result = minimize(loss_partial, [1.0]*MAX_NPARAMS, method='BFGS')
    
    # Return evaluation score
    optimized_params = result.x
    loss = result.fun

    if np.isnan(loss) or np.isinf(loss):
        return None
    else:
        return -loss

        
@equation.evolve
def equation(t: np.ndarray, A: np.ndarray, params: np.ndarray) -> np.ndarray:
    """ Mathematical function for Rate of change of concentration in chemistry reaction kinetics

    Args:
        t: A numpy array representing observations of Time.
        A: A numpy array representing observations of Concentration at time t.
        params: Array of numeric constants or parameters to be optimized

    Return:
        A numpy array representing Rate of change of concentration in chemistry reaction kinetics as the result of applying the mathematical function to the inputs.
    """
    output = params[0] * t + params[1] * A + params[2]
    return output